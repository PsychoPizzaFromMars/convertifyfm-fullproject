import React from "react";

import { spotify } from "../../utils/api/spotifyAPI";

import { ErrorMessage } from "../../components/ErrorMessage";
import { Loader } from "../../components/Loader";
import { PageDescription } from "../../components/PageDescription";
import PlaylistForm from "../../components/PlaylistForm";
import { ScrollButtons } from "../../components/ScrollButtons";
import { SearchResults } from "../../components/SearchResults";

import BaseForm from "../../components/BaseForm";
import { useAuth } from "../../utils/AuthContext";
import { convertSpotifyTracksToCheckboxesTable } from "../../utils/helpers";
import { useCheckboxes, useFetchTracks, useForm } from "../../utils/hooks";

export default function TimePeriodChart(props) {
    const { tracks, loading, error, setError, fetchData } = useFetchTracks();
    const {
        checkboxes,
        setCheckboxes,
        handleCheck,
        handleCheckAll,
        handleUncheckAll,
    } = useCheckboxes();
    const [searchForm, , handleSearchFormChange] = useForm({
        period: "short_term",
        tracksNum: "50",
    });
    const [playlistForm, setPlaylistForm, handlePlaylistFormChange] = useForm({
        playlistName: "ConvertifyFm",
        playlistDesc: "Generated by ConvertifyFm",
    });
    const fields = [
        {
            name: "period",
            label: "Time period",
            type: "select",
            options: [
                {
                    value: "short_term",
                    label: "Last month",
                },
                {
                    value: "medium_term",
                    label: "Last 6 months",
                },
                {
                    value: "long_term",
                    label: "Last several years",
                },
            ],
            required: true,
        },
        {
            name: "tracksNum",
            label: "Number of tracks",
            type: "number",
            validation: { required: true, min: "5", max: "50" },
        },
    ];

    const setDefaultPlaylistDesc = () => {
        const spotify_periods = {
            long_term: "last several years",
            medium_term: "last 6 months",
            short_term: "last month",
        };
        const playlistDesc = `Your Spotify top tracks for ${
            spotify_periods[searchForm.period]
        } generated by ConvertifyFM.`;
        setPlaylistForm((prevState) => ({ ...prevState, playlistDesc }));
    };

    const handleSearchButtonClick = (event) => {
        event.preventDefault();
        const body = {
            time_range: searchForm.period,
            limit: searchForm.tracksNum,
        };

        setDefaultPlaylistDesc();
        fetchData(spotify.getUserTopTracks, body)
            .then((fetchedTracks) => {
                setCheckboxes(
                    convertSpotifyTracksToCheckboxesTable(fetchedTracks)
                );
            })
            .catch((error) => {
                setError(error);
            });
    };

    const { isLoggedIn } = useAuth();
    let results;

    if (isLoggedIn) {
        if (error) {
            results = <ErrorMessage error={error} />;
        } else if (loading) {
            results = <Loader />;
        } else if (tracks.length > 0) {
            results = (
                <>
                    <SearchResults
                        onCheckAll={handleCheckAll}
                        onUncheckAll={handleUncheckAll}
                        onCheck={handleCheck}
                        tracks={tracks}
                        checkboxes={checkboxes}
                    />
                    <PlaylistForm
                        formData={playlistForm}
                        onInputChange={handlePlaylistFormChange}
                        checkboxes={checkboxes}
                    />
                    <ScrollButtons />
                </>
            );
        }
    }

    return (
        <>
            <PageDescription
                title="Your Top Tracks Spotify Chart"
                text="Stay in touch with your music tastes by making Spotify Top
                    Tracks playlists."
            />

            <BaseForm
                onSubmit={handleSearchButtonClick}
                formData={searchForm}
                onInputChange={handleSearchFormChange}
                fields={fields}
            />

            {results}
        </>
    );
}
