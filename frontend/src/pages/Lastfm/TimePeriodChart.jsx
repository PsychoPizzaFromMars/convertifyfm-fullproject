import React from "react";

import PlaylistForm from "../../components/PlaylistForm";

import { lastFM } from "../../utils/api/lastfmAPI";
import { spotify } from "../../utils/api/spotifyAPI";
import {
    convertSpotifyTracksToCheckboxesTable,
    convertToUnixDate,
    convertYMDtoDMY,
    dateNow,
    transformResponse,
} from "../../utils/helpers";

import BaseForm from "../../components/BaseForm";
import { ErrorMessage } from "../../components/ErrorMessage";
import { Loader } from "../../components/Loader";
import { PageDescription } from "../../components/PageDescription";
import { ScrollButtons } from "../../components/ScrollButtons";
import { SearchResults } from "../../components/SearchResults";
import { useAuth } from "../../utils/AuthContext";
import { useCheckboxes, useFetchTracks, useForm } from "../../utils/hooks";

export default function TimePeriodChart(props) {
    const { tracks, loading, error, setError, fetchData } = useFetchTracks();
    const {
        checkboxes,
        setCheckboxes,
        handleCheck,
        handleCheckAll,
        handleUncheckAll,
    } = useCheckboxes();
    const [searchForm, , handleSearchFormChange] = useForm({
        username: "",
        dateStart: "2000-01-01",
        dateEnd: dateNow(),
        tracksNum: "50",
    });
    const [playlistForm, setPlaylistForm, handlePlaylistFormChange] = useForm({
        playlistName: "ConvertifyFm",
        playlistDesc: "Generated by ConvertifyFm",
    });
    const fields = [
        {
            name: "username",
            label: "Last.fm username",
            type: "text",
            validation: {
                oninvalid: "('Enter User Name Here')",
                oninput: "setCustomValidity('')",
                required: true,
            },
        },
        {
            label: "Time range",
            type: "dateRange",
            required: true,
        },
        {
            name: "tracksNum",
            label: "Number of tracks",
            type: "number",
            validation: { required: true, min: "5", max: "1000" },
        },
    ];

    const setDefaultPlaylistDesc = (dateStart, dateEnd) => {
        const playlistDesc = `${searchForm.username}'s LastFM top tracks for ${dateStart} - ${dateEnd} generated by ConvertifyFM.`;
        setPlaylistForm((prevState) => ({ ...prevState, playlistDesc }));
    };

    const handleSearchButtonClick = (event) => {
        event.preventDefault();
        const body = {
            user_id: searchForm.username,
            date_from: convertToUnixDate(searchForm.dateStart),
            date_to: convertToUnixDate(searchForm.dateEnd),
            limit: searchForm.tracksNum,
        };
        const dateStart = convertYMDtoDMY(searchForm.dateStart);
        const dateEnd = convertYMDtoDMY(searchForm.dateEnd);
        setDefaultPlaylistDesc(dateStart, dateEnd);

        // Fetch LastFM top charts tracklist and pass it to spotify search
        lastFM
            .getWeeklyTrackchart(body)
            .then((lastfmTracks) => {
                if (!lastfmTracks) {
                    throw new Error("Bad request");
                }
                const body = {
                    tracklist: lastfmTracks,
                };
                return fetchData(spotify.search, body, transformResponse).then(
                    (fetchedTracks) => {
                        setCheckboxes(
                            convertSpotifyTracksToCheckboxesTable(fetchedTracks)
                        );
                    }
                );
            })
            .catch((error) => {
                setError(error);
            });
    };

    const { isLoggedIn } = useAuth();
    let results;

    if (isLoggedIn) {
        if (error) {
            results = <ErrorMessage error={error} />;
        } else if (loading) {
            results = <Loader />;
        } else if (tracks.length > 0) {
            results = (
                <>
                    <SearchResults
                        onCheckAll={handleCheckAll}
                        onUncheckAll={handleUncheckAll}
                        onCheck={handleCheck}
                        tracks={tracks}
                        checkboxes={checkboxes}
                    />
                    <PlaylistForm
                        formData={playlistForm}
                        onInputChange={handlePlaylistFormChange}
                        checkboxes={checkboxes}
                    />
                    <ScrollButtons />
                </>
            );
        }
    }

    return (
        <>
            <PageDescription
                title="Chosen Time Period LastFM Chart"
                text="Make Spotify playlist of your best music for different time
                    periods."
            />
            <BaseForm
                formData={searchForm}
                onInputChange={handleSearchFormChange}
                onSubmit={handleSearchButtonClick}
                fields={fields}
            />

            {results}
        </>
    );
}
